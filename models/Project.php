<?php

namespace app\models;

use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "project".
 *
 * @property int $project_id
 * @property string $project_name
 * @property string $project_date
 * @property string $project_area
 * @property string $project_advantages
 * @property string $project_specifications
 * @property string $project_consumers
 * @property string $project_protection
 *
 * @property Classificate1[] $classificate1s
 * @property Grnti[] $grntis
 * @property Classificate2[] $classificate2s
 * @property Udk[] $udks
 * @property Classificate3[] $classificate3s
 * @property Directions[] $directions
 * @property Collaborator[] $collaborators
 * @property Member[] $members
 * @property Working[] $workings
 * @property Department[] $departments
 */
class Project extends \yii\db\ActiveRecord
{
    public $udks_array;
    public $grntis_array;
    public $departments_array;
    public $directions_array;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'project';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['project_name', 'project_date', 'project_area', 'project_advantages', 'project_specifications', 'project_consumers', 'project_protection'], 'required'],
            [['project_date'], 'safe'],
            [['project_name', 'project_area', 'project_advantages', 'project_specifications', 'project_consumers', 'project_protection'], 'string', 'max' => 254],
            [['udks_array', 'grntis_array', 'directions_array', 'departments_array'], 'safe'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'project_id' => 'Проект',
            'project_name' => 'Название',
            'project_date' => 'Дата',
            'project_area' => 'Область',
            'project_advantages' => 'Преимущества',
            'project_specifications' => 'Спецификации',
            'project_consumers' => 'Потребители',
            'project_protection' => 'Защита',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getClassificate1s()
    {
        return $this->hasMany(Classificate1::className(), ['project_id' => 'project_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getGrntis()
    {
        return $this->hasMany(Grnti::className(), ['grnti_id' => 'grnti_id'])->viaTable('classificate_1', ['project_id' => 'project_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getClassificate2s()
    {
        return $this->hasMany(Classificate2::className(), ['project_id' => 'project_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUdks()
    {
        return $this->hasMany(Udk::className(), ['udk_id' => 'udk_id'])->viaTable('classificate_2', ['project_id' => 'project_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getClassificate3s()
    {
        return $this->hasMany(Classificate3::className(), ['project_id' => 'project_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDirections()
    {
        return $this->hasMany(Directions::className(), ['direction_id' => 'direction_id'])->viaTable('classificate_3', ['project_id' => 'project_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCollaborators()
    {
        return $this->hasMany(Collaborator::className(), ['project_id' => 'project_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMembers()
    {
        return $this->hasMany(Member::className(), ['member_id' => 'member_id'])->viaTable('collaborator', ['project_id' => 'project_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getWorkings()
    {
        return $this->hasMany(Working::className(), ['project_id' => 'project_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDepartments()
    {
        return $this->hasMany(Department::className(), ['department_id' => 'department_id'])->viaTable('working', ['project_id' => 'project_id']);
    }

    public function afterFind()
    {
        $this->udks_array = $this->udks;
        $this->grntis_array = $this->grntis;
        $this->departments_array = $this->departments;
        $this->directions_array = $this->directions;
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        if(is_array($this->udks_array)) {
            $arr = ArrayHelper::map($this->udks, 'udk_id', 'udk_id');
            foreach ($this->udks_array as $udk) {
                if (!in_array($udk, $arr)) {
                    $model = new Classificate2();
                    $model->project_id = $this->project_id;
                    $model->udk_id = $udk;
                    $model->save();
                }
                if (isset($arr[$udk])) {
                    unset($arr[$udk]);
                }
            }
            Classificate2::deleteAll(['udk_id' => $arr]);
        }
        else{
            Classificate2::deleteAll(['project_id' => $this->project_id]);
        }

        if(is_array($this->grntis_array)) {
            $arr = ArrayHelper::map($this->grntis, 'grnti_id', 'grnti_id');
            foreach ($this->grntis_array as $grnti) {
                if (!in_array($grnti, $arr)) {
                    $model = new Classificate1();
                    $model->project_id = $this->project_id;
                    $model->grnti_id = $grnti;
                    $model->save();
                }
                if (isset($arr[$grnti])) {
                    unset($arr[$grnti]);
                }
            }
            Classificate1::deleteAll(['grnti_id' => $arr]);
        }
        else{
            Classificate1::deleteAll(['project_id' => $this->project_id]);
        }

        if(is_array($this->directions_array)){
            $arr = ArrayHelper::map($this->directions, 'direction_id', 'direction_id');
            foreach ($this->directions_array as $direction){
                if(!in_array($direction, $arr)){
                    $model = new Classificate3();
                    $model->project_id = $this->project_id;
                    $model->direction_id = $direction;
                    $model->save();
                }
                if(isset($arr[$direction])){
                    unset($arr[$direction]);
                }
            }
            Classificate3::deleteAll(['direction_id' => $arr]);
        }
        else{
            Classificate3::deleteAll(['project_id' => $this->project_id]);
        }

        if(is_array($this->departments_array)){
            $arr = ArrayHelper::map($this->departments, 'department_id', 'department_id');
            foreach ($this->departments_array as $department){
                if(!in_array($department, $arr)){
                    $model = new Working();
                    $model->project_id = $this->project_id;
                    $model->department_id = $department;
                    $model->save();
                }
                if(isset($arr[$department])){
                    unset($arr[$department]);
                }
            }
            Working::deleteAll(['department_id' => $arr]);
        }
        else{
            Working::deleteAll(['project_id' => $this->project_id]);
        }
    }
}
